@model MichiBlog.WebApp.ViewModels.BlogPostVM
@{
    ViewData["Title"] = "Post";
    string thumbnailUrl = "";
    if (Model.ThumbnailUrl == null || Model.ThumbnailUrl == "")
    {
        thumbnailUrl = "/blog/assets/img/post-bg.jpg";
    }
    else {
        thumbnailUrl = "/Thumbnails/" + Model.ThumbnailUrl;
    }
}

<!-- Page Header-->
<header class="masthead" style="background-image: url('@thumbnailUrl')">
    <div class="container position-relative px-4 px-lg-5">
        <div class="row gx-4 gx-lg-5 justify-content-center">
            <div class="col-md-10 col-lg-8 col-xl-7">
                <div class="post-heading">
                    <h1>@Model.Title</h1>
                    <h2 class="subheading">@Model.ShortDescription</h2>
                    <span class="meta">
                        Posted by
                        <a href="#!">@Model.Author</a>
                        on @Model.CreatedDate.ToShortDateString()   
                    </span>
                </div>
            </div>
        </div>
    </div>
</header>
<!-- Post Content-->
<article class="mb-4">
    <div class="container px-4 px-lg-5">
        <div class="row gx-4 gx-lg-5 justify-content-center">
            <div class="col-md-10 col-lg-8 col-xl-7">
                @Html.Raw(Model.Content)
            </div>
        </div>
    </div>
</article>

@if (User.Identity.IsAuthenticated){
<div class="like-dislike-container">
    <div class="tool-box">
        <button class="btn-close">×</button>
    </div>
    <p class="text-content">What did you think<br>of this post?</p>
    <div class="icons-box">
        <div class="icons">
            <label class="btn-label" for="like-checkbox">
                <span class="like-text-content">@Model.LikesCount</span>
                <input class="input-box" id="like-checkbox" type="checkbox"
                @if (Model.CurrentLiked) { @Html.Raw("checked") }>
                <svg class="svgs" id="icon-like-solid" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M313.4 32.9c26 5.2 42.9 30.5 37.7 56.5l-2.3 11.4c-5.3 26.7-15.1 52.1-28.8 75.2H464c26.5 0 48 21.5 48 48c0 18.5-10.5 34.6-25.9 42.6C497 275.4 504 288.9 504 304c0 23.4-16.8 42.9-38.9 47.1c4.4 7.3 6.9 15.8 6.9 24.9c0 21.3-13.9 39.4-33.1 45.6c.7 3.3 1.1 6.8 1.1 10.4c0 26.5-21.5 48-48 48H294.5c-19 0-37.5-5.6-53.3-16.1l-38.5-25.7C176 420.4 160 390.4 160 358.3V320 272 247.1c0-29.2 13.3-56.7 36-75l7.4-5.9c26.5-21.2 44.6-51 51.2-84.2l2.3-11.4c5.2-26 30.5-42.9 56.5-37.7zM32 192H96c17.7 0 32 14.3 32 32V448c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32V224c0-17.7 14.3-32 32-32z"></path></svg>
                <svg class="svgs" id="icon-like-regular" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M323.8 34.8c-38.2-10.9-78.1 11.2-89 49.4l-5.7 20c-3.7 13-10.4 25-19.5 35l-51.3 56.4c-8.9 9.8-8.2 25 1.6 33.9s25 8.2 33.9-1.6l51.3-56.4c14.1-15.5 24.4-34 30.1-54.1l5.7-20c3.6-12.7 16.9-20.1 29.7-16.5s20.1 16.9 16.5 29.7l-5.7 20c-5.7 19.9-14.7 38.7-26.6 55.5c-5.2 7.3-5.8 16.9-1.7 24.9s12.3 13 21.3 13L448 224c8.8 0 16 7.2 16 16c0 6.8-4.3 12.7-10.4 15c-7.4 2.8-13 9-14.9 16.7s.1 15.8 5.3 21.7c2.5 2.8 4 6.5 4 10.6c0 7.8-5.6 14.3-13 15.7c-8.2 1.6-15.1 7.3-18 15.1s-1.6 16.7 3.6 23.3c2.1 2.7 3.4 6.1 3.4 9.9c0 6.7-4.2 12.6-10.2 14.9c-11.5 4.5-17.7 16.9-14.4 28.8c.4 1.3 .6 2.8 .6 4.3c0 8.8-7.2 16-16 16H286.5c-12.6 0-25-3.7-35.5-10.7l-61.7-41.1c-11-7.4-25.9-4.4-33.3 6.7s-4.4 25.9 6.7 33.3l61.7 41.1c18.4 12.3 40 18.8 62.1 18.8H384c34.7 0 62.9-27.6 64-62c14.6-11.7 24-29.7 24-50c0-4.5-.5-8.8-1.3-13c15.4-11.7 25.3-30.2 25.3-51c0-6.5-1-12.8-2.8-18.7C504.8 273.7 512 257.7 512 240c0-35.3-28.6-64-64-64l-92.3 0c4.7-10.4 8.7-21.2 11.8-32.2l5.7-20c10.9-38.2-11.2-78.1-49.4-89zM32 192c-17.7 0-32 14.3-32 32V448c0 17.7 14.3 32 32 32H96c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32H32z"></path></svg>
                <div class="fireworks">
                    <div class="checked-like-fx"></div>
                </div>
            </label>
        </div>
        <div class="icons">
            <label class="btn-label" for="dislike-checkbox">
                <input class="input-box" id="dislike-checkbox" type="checkbox"
                @if (Model.CurrentDisliked) { @Html.Raw("checked") }>
                <div class="fireworks">
                    <div class="checked-dislike-fx"></div>
                </div>
                <svg class="svgs" id="icon-dislike-solid" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M313.4 32.9c26 5.2 42.9 30.5 37.7 56.5l-2.3 11.4c-5.3 26.7-15.1 52.1-28.8 75.2H464c26.5 0 48 21.5 48 48c0 18.5-10.5 34.6-25.9 42.6C497 275.4 504 288.9 504 304c0 23.4-16.8 42.9-38.9 47.1c4.4 7.3 6.9 15.8 6.9 24.9c0 21.3-13.9 39.4-33.1 45.6c.7 3.3 1.1 6.8 1.1 10.4c0 26.5-21.5 48-48 48H294.5c-19 0-37.5-5.6-53.3-16.1l-38.5-25.7C176 420.4 160 390.4 160 358.3V320 272 247.1c0-29.2 13.3-56.7 36-75l7.4-5.9c26.5-21.2 44.6-51 51.2-84.2l2.3-11.4c5.2-26 30.5-42.9 56.5-37.7zM32 192H96c17.7 0 32 14.3 32 32V448c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32V224c0-17.7 14.3-32 32-32z"></path></svg>
                <svg class="svgs" id="icon-dislike-regular" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M323.8 34.8c-38.2-10.9-78.1 11.2-89 49.4l-5.7 20c-3.7 13-10.4 25-19.5 35l-51.3 56.4c-8.9 9.8-8.2 25 1.6 33.9s25 8.2 33.9-1.6l51.3-56.4c14.1-15.5 24.4-34 30.1-54.1l5.7-20c3.6-12.7 16.9-20.1 29.7-16.5s20.1 16.9 16.5 29.7l-5.7 20c-5.7 19.9-14.7 38.7-26.6 55.5c-5.2 7.3-5.8 16.9-1.7 24.9s12.3 13 21.3 13L448 224c8.8 0 16 7.2 16 16c0 6.8-4.3 12.7-10.4 15c-7.4 2.8-13 9-14.9 16.7s.1 15.8 5.3 21.7c2.5 2.8 4 6.5 4 10.6c0 7.8-5.6 14.3-13 15.7c-8.2 1.6-15.1 7.3-18 15.1s-1.6 16.7 3.6 23.3c2.1 2.7 3.4 6.1 3.4 9.9c0 6.7-4.2 12.6-10.2 14.9c-11.5 4.5-17.7 16.9-14.4 28.8c.4 1.3 .6 2.8 .6 4.3c0 8.8-7.2 16-16 16H286.5c-12.6 0-25-3.7-35.5-10.7l-61.7-41.1c-11-7.4-25.9-4.4-33.3 6.7s-4.4 25.9 6.7 33.3l61.7 41.1c18.4 12.3 40 18.8 62.1 18.8H384c34.7 0 62.9-27.6 64-62c14.6-11.7 24-29.7 24-50c0-4.5-.5-8.8-1.3-13c15.4-11.7 25.3-30.2 25.3-51c0-6.5-1-12.8-2.8-18.7C504.8 273.7 512 257.7 512 240c0-35.3-28.6-64-64-64l-92.3 0c4.7-10.4 8.7-21.2 11.8-32.2l5.7-20c10.9-38.2-11.2-78.1-49.4-89zM32 192c-17.7 0-32 14.3-32 32V448c0 17.7 14.3 32 32 32H96c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32H32z"></path></svg>
                <span class="dislike-text-content">@Model.DislikesCount</span>
            </label>
        </div>
    </div>
</div>  
}

<section class="comments-section py-4">
    <div class="container px-4 px-lg-5">
        <div class="row gx-4 gx-lg-5 justify-content-center">
            <div class="col-md-10 col-lg-8 col-xl-7">
                <h4>Comments:</h4>

                <!-- Display Comments -->
                @if (Model.Comments.Any())
                {
                    <ul class="list-group">
                        @foreach (var comment in Model.Comments.Where(c => c.ParentCommentId == null))
                        {
                            <li class="list-group-item mb-2">
                                <strong>
                                    @if (comment.User.UserName == User.Identity.Name)
                                    {
                                        @Html.Raw("You")
                                    }
                                    else
                                    {
                                        @comment.User.UserName
                                    }
                                </strong> <span class="text-muted" data-type="comment" data-timestamp="@comment.CreatedDate.ToString("o")"></span>
                                <p>@comment.Content</p>

                                <!-- Reply Button -->
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <button class="btn btn-link reply-toggle" data-comment-id="@comment.Id">Reply</button>

                                    <!-- Reply Form -->
                                    <div class="reply-form" id="reply-form-@comment.Id" style="display: none;">
                                        <form asp-action="AddComment" asp-controller="Blog" method="post" class="mt-4">
                                            <input type="hidden" name="postId" value="@Model.Id" />
                                            <input type="hidden" name="parentCommentId" value="@comment.Id" />
                                            <div class="mb-3">
                                                <textarea name="content" class="form-control" rows="4" placeholder="Write your reply here..." required></textarea>
                                            </div>
                                            <button type="submit" class="btn btn-primary">Reply</button>
                                        </form>
                                    </div>
                                }

                                <!-- Display Replies -->
                                @if (comment.Replies != null && comment.Replies.Any())
                                {
                                    <ul class="list-group mt-3">
                                        @foreach (var reply in comment.Replies)
                                        {
                                            <li class="list-group-item mb-2">
                                                <strong>@reply.User.UserName</strong> <span class="text-muted" data-type="reply" data-timestamp="@reply.CreatedDate.ToString("o")"></span>
                                                <p>@reply.Content</p>
                                            </li>
                                        }
                                    </ul>
                                }
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>No comments yet. Be the first to comment!</p>
                }

                <!-- Add Comment Form -->
                @if (!User.Identity.IsAuthenticated)
                {
                    <p>You must be logged in to add a comment.</p>
                }
                else
                {
                    <form asp-action="AddComment" asp-controller="Blog" method="post" class="mt-4">
                        <input type="hidden" name="postId" value="@Model.Id" />
                        <div class="mb-3">
                            <textarea name="content" class="form-control" rows="4" placeholder="Write your comment here..." required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Submit Comment</button>
                    </form>
                }
            </div>
        </div>
    </div>
</section>

<script>
    $(document).ready(function() {
        let currentLiked = @Model.CurrentLiked.ToString().ToLower();  // Check if user has liked
        let currentDisliked = @Model.CurrentDisliked.ToString().ToLower();  // Check if user has disliked

        // Handle Like checkbox change
        $('#like-checkbox').change(function() {
            let liked = $(this).prop('checked');
            let disliked = currentDisliked === "true"; // Keep the current dislike state

            // If already liked, uncheck it (remove reaction)
            if (liked === (currentLiked === "true")) {
                liked = false; // Uncheck the like box (remove like)
            }
            currentLiked = liked ? "true" : "false"; // Update the current like state

            let postId = @Model.Id; // Assuming you have the blog post ID in your view

            $.ajax({
                url: "/Blog/AddReaction",
                type: "POST",
                data: {
                    postId: postId,
                    liked: liked,
                    disliked: disliked
                },
                success: function(response) {
                    console.log("Reaction updated!");
                },
                error: function(xhr, status, error) {
                    console.error("Error: " + xhr.responseText);
                }
            });
        });

         // Handle Dislike checkbox change
        $('#dislike-checkbox').change(function() {
            let disliked = $(this).prop('checked');
            let liked = currentLiked === "true";  // Convert string "true" to actual boolean

            // If already disliked, uncheck it (remove reaction)
            if (disliked === (currentDisliked === "true")) {
                disliked = false; // Uncheck the dislike box (remove dislike)
            }
            currentDisliked = disliked ? "true" : "false"; // Update the current dislike state

            let postId = @Model.Id; // Assuming you have the blog post ID in your view

            $.ajax({
                url: "/Blog/AddReaction",
                type: "POST",
                data: {
                    postId: postId,
                    liked: liked,
                    disliked: disliked
                },
                success: function(response) {
                    console.log("Reaction updated!");
                },
                error: function(xhr, status, error) {
                    console.error("Error: " + xhr.responseText);
                }
            });
        });
    });

    document.addEventListener("DOMContentLoaded", function () {
        // Get all reply toggle buttons
        const replyToggleButtons = document.querySelectorAll(".reply-toggle");

        replyToggleButtons.forEach(button => {
            button.addEventListener("click", function () {
                const commentId = this.getAttribute("data-comment-id");
                const replyForm = document.getElementById(`reply-form-${commentId}`);

                // Toggle the visibility of the reply form
                if (replyForm.style.display === "none") {
                    replyForm.style.display = "block";
                } else {
                    replyForm.style.display = "none";
                }
            });
        });

        const updateTimestamps = () => {
            const elements = document.querySelectorAll("[data-timestamp]");

            elements.forEach(el => {
                const timestamp = el.getAttribute("data-timestamp");
                const type = el.getAttribute("data-type"); // "comment" or "reply"
                const relativeTime = moment(timestamp).fromNow(); // "10 minutes ago", etc.

                // Display "commented on" or "replied on" based on the type
                if (type === "comment") {
                    el.innerText = `commented ${relativeTime}`;
                } else if (type === "reply") {
                    el.innerText = `replied ${relativeTime}`;
                }
            });
        };

        // Run once on page load
        updateTimestamps();

        // Optionally, update every minute for real-time effect
        setInterval(updateTimestamps, 60000);
    });
</script>





