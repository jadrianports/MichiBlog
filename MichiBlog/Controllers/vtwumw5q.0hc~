using AspNetCoreHero.ToastNotification.Abstractions;
using MichiBlog.WebApp.Data;
using MichiBlog.WebApp.Models;
using MichiBlog.WebApp.ViewModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;

namespace MichiBlog.WebApp.Controllers
{
    public class BlogController : Controller
    {
        private readonly ApplicationDbContext _context;
        public INotyfService _notification { get; }
        public BlogController(ApplicationDbContext context,
                              INotyfService notification) {
            _context = context;
            _notification = notification;
        }
        [HttpGet]
        public IActionResult Post(string slug)
        {
            if (slug == "") {
                _notification.Error("Post not found");
                return View();
            }
            var post = _context.Posts!.Include(x => x.ApplicationUser).FirstOrDefault(x => x.Slug == slug);
            if (post == null) {
                _notification.Error("Post not found");
                return View();
            }
            var blogPostVM = new BlogPostVM() {
                Id = post.Id,
                Title = post.Title,
                ShortDescription = post.ShortDescription,
                Content = post.Description,
                ThumbnailUrl = post.ThumbnailUrl,
                Author = post.ApplicationUser!.FirstName + " " + post.ApplicationUser.LastName,
                CreatedDate = post.CreatedDate

            };
            return View(blogPostVM);
        }

        [HttpPost]
        public IActionResult AddComment(int postId, string content)
        {
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (userId == null) return Unauthorized();

            var comment = new Comment
            {
                Content = content,
                PostId = postId,
                UserId = userId
            };

            _context.Comments!.Add(comment);
            _context.SaveChanges();

            return RedirectToAction("Post", new { id = postId });
        }

        [HttpPost]
        public IActionResult React(int postId, string type)
        {
            var reaction = _context.Reactions.FirstOrDefault(r => r.PostId == postId && r.Type == type);

            if (reaction == null)
            {
                reaction = new Reaction
                {
                    PostId = postId,
                    Type = type,
                    Count = 1
                };
                _context.Reactions.Add(reaction);
            }
            else
            {
                reaction.Count++;
            }

            _context.SaveChanges();
            return RedirectToAction("Post", new { id = postId });
        }
    }
}
